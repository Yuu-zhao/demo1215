package com.example.demo;

import com.sun.deploy.util.StringUtils;
import lombok.Data;
import org.apache.logging.log4j.spi.CopyOnWrite;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;
import org.springframework.util.ConcurrentReferenceHashMap;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.StampedLock;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static java.lang.Math.pow;

@SpringBootTest
class DemoApplicationTests {


    @Test
    void contextLoads() {
        //  System.out.println(reorderedPowerOf2(46));
        int n = 1;
        List<String> list = new ArrayList<>();
        list.add(String.valueOf(n));
        while (n < pow(10, 9)) {
            n = n * 2;
            final char[] chars = String.valueOf(n).toCharArray();
            Arrays.sort(chars);
            list.add("\"" + new String(chars) + "\"");
        }
        System.out.println(Arrays.toString(list.toArray()));
    }


    @Test
    public void test() {
        final int[] cnt = getCnt("1s3 PSt");

        System.out.println(truncateSentence("Hello how are you Contestant", 4));
    }

    public String shortestCompletingWord(String licensePlate, String[] words) {
        int[] cnt = getCnt(licensePlate);
        String ans = null;
        for (String s : words) {
            int[] cur = getCnt(s);
            boolean ok = true;
            for (int i = 0; i < 26 && ok; i++) {
                if (cnt[i] > cur[i]) ok = false;
            }
            if (ok && (ans == null || ans.length() > s.length())) ans = s;
        }
        return ans;
    }

    int[] getCnt(String s) {
        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            if (Character.isLetter(c)) cnt[Character.toLowerCase(c) - 'a']++;
        }
        return cnt;
    }


    //  利用下标 阶段更利
    //  public String truncateSentence(String s, int k) {
    //        for (int i = 0; i < s.length(); i++)
    //			if (s.charAt(i) == ' ' && --k == 0)
    //				return s.substring(0, i);
    //		return s;
    //    }
    public String truncateSentence(String s, int k) {
        String res = "";
        for (int i = 0; i < s.length(); i++) {
            if (k == 0) break;
            if (Character.isSpaceChar(s.charAt(i))) k--;
            res += s.charAt(i);
        }
        return res;
    }

    //[-2,9,9,8,4]
    //5
    public int largestSumAfterKNegations(int[] nums, int k) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length && k > 0; i++, k--) {
            if (nums[i] >= 0) break;
            nums[i] = -nums[i];
        }
        int sum = 0;
        Arrays.sort(nums);
        for (int n : nums) sum += n;
        if (k != 0 && k % 2 != 0) sum -= 2 * nums[0];
        return sum;
    }

    public String[] findRelativeRanks(int[] score) {
        String[] res = new String[score.length];
        int[] s = new int[score.length];
        s = score.clone();
        Arrays.parallelSort(s);
        HashMap<Integer, String> map = new HashMap<>();
        int index = 0;
        for (int i = s.length - 1; i >= 0; i--) {
            index++;
            String v = index == 1 ? "Gold Medal" : index == 2 ? "Silver Medal" : index == 3 ? "Bronze Medal" : String.valueOf(index);
            map.put(s[i], v);
        }
        for (int i = 0; i < score.length; i++) {
            res[i] = map.get(score[i]);
        }
        return res;
    }

    public int maxPower(String s) {
        if (s.length() == 0) return 0;
        int res = 1;
        int tempNum = 1;
        String p = String.valueOf(s.charAt(0));
        for (int i = 1; i < s.length(); i++) {
            final String s1 = String.valueOf(s.charAt(i));
            if (!p.equals(s1)) {
                p = s1;
                tempNum = 1;
            } else {
                tempNum++;
            }
            res = Math.max(tempNum, res);
        }
        return res;
    }

    // 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
    public int findNthDigit(int n) {
        int len = 1;
        while (len * 9 * Math.pow(10, len - 1) < n) {
            n -= len * 9 * Math.pow(10, len - 1);
            len++;
        }
        long s = (long) Math.pow(10, len - 1);
        s += n / len - 1;
        n -= len * (n / len);
        return n == 0 ? (int) (s % 10) : (int) ((s + 1) / Math.pow(10, len - n) % 10);
    }

    private int getNum(int num, String[] strings) {
        int res = 0;
        for (int i = 0; i < Math.min(num, strings.length); i++) {
            if (i % 2 == 0) {
                res++;
            }
        }
        return res;
    }

    public int findPoisonedDuration(int[] timeSeries, int duration) {
        if (timeSeries.length == 0) return 0;
        int index = timeSeries[0];
        int res = duration;
        for (int i = 1; i < timeSeries.length; i++) {
            if (timeSeries[i] > timeSeries[i - 1] + duration - 1) {
                res = res + duration;
            } else {
                res = res + (timeSeries[i] - timeSeries[i - 1]);
            }
        }
        return res;
    }

    public int longestSubsequence(int[] arr, int difference) {

        HashMap<Integer, Integer> map = new HashMap<>();
        int res = 1;
        for (int i : arr) {
            map.put(i, map.getOrDefault(i - difference, 0) + 1);
            res = Math.max(map.get(i), res);
        }
        return res;
    }

    public int distributeCandies_(int[] candyType) {
        Set<Integer> set = new HashSet<>();
        for (int i : candyType) set.add(i);
        return Math.min(candyType.length / 2, set.size());
    }

    public int distributeCandies(int[] candyType) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : candyType) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int res = 0;
        for (Map.Entry<Integer, Integer> integerIntegerEntry : map.entrySet()) {
            res++;
            if (res >= candyType.length / 2) {
                return res;
            }
        }
        return res;
    }

    public boolean isSelfCrossing(int[] distance) {
        if (distance.length < 4) return false;
        int x = 0;
        int y = 0;
        int top = 0;
        int left = 0;
        int down = 0;
        int right = 0;
        for (int i = 4; i < distance.length; i++) {
            int m = i % 4;
            if (m == 1) {


            } else if (m == 2) {
                x = x - distance[i];
            } else if (m == 3) {
                y = y - distance[i];
            } else {
                x = x + distance[i];
            }
        }
        return false;
    }


    public boolean reorderedPowerOf2(int n) {
        String[] arr = {"1", "2", "4", "8", "16", "23", "46", "128", "256", "125", "0124", "0248", "0469", "1289", "13468", "23678", "35566", "011237", "122446", "224588", "0145678", "0122579", "0134449", "0368888", "11266777", "23334455", "01466788", "112234778", "234455668", "012356789", "0112344778"};
        final String s = String.valueOf(n);
        for (String s1 : arr) {
            if (s1.length() == s.length()) {
                final char[] chars = s.toCharArray();
                Arrays.sort(chars);
                if (new String(chars).equals(s1)) return true;
            }
        }

        return false;
    }


    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(nums2[nums2.length - 1], -1);
        for (int i = nums2.length - 2; i >= 0; i--) {
            if (nums2[i + 1] > nums2[i]) {
                map.put(nums2[i], nums2[i + 1]);
            } else {
                for (int j = i + 1; j < nums2.length; j++) {
                    if (nums2[j] > nums2[i]) {
                        map.put(nums2[i], nums2[j]);
                        break;
                    }
                }
                if (!map.containsKey(nums2[i])) {
                    map.put(nums2[i], -1);
                }
            }
        }
        for (int i = 0; i < nums1.length; i++) {
            nums1[i] = map.getOrDefault(nums1[i], -1);
        }
        return nums1;
    }

    public List<Integer> majorityElement(int[] nums) {

        int length = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            if (map.get(num) != null) {
                map.put(num, map.get(num) + 1);
            }
            map.put(num, 1);
        }
        List<Integer> result = new ArrayList<>();
        for (Integer integer : map.keySet()) {
            if (map.get(integer) > length / 3) result.add(map.get(integer));
        }

        return result;

    }


    Map<Integer, Set<String>> map = new HashMap<>();


    // [1,2,9]
    // [1,2,0]
    // [1,3,0]
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + 1;
            if (sum < 10) {
                digits[i] = sum;
                return digits;
            }
            digits[i] = 0;
        }
        int[] result = new int[digits.length + 1];
        result[0] = 1;
        return result;
    }

    public void addWord(String word) {
        int length = word.length();
        if (map.get(length) != null) {
            map.get(length).add(word);
        } else {
            Set<String> set = new HashSet<>();
            set.add(word);
            map.put(length, set);
        }
    }

    public boolean search(String word) {
        return false;
    }


    public int findComplement(int num) {
        int temp = num;
        int n = 0;
        while (temp > 0) {
            temp >>= 1;
            n = (n << 1) + 1;

        }
        return num ^ n;
    }

    public String countAndSay_(int n) {
        String result = "1";
        for (int i = 2; i <= n; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < result.length(); j++) {
                int count = 1;
                while (j + 1 < result.length() && result.charAt(j + 1) == result.charAt(j)) {
                    count++;
                    j++;
                }
                sb.append(count).append(result.charAt(j));
            }
            result = sb.toString();
        }
        return result;
    }

    public String countAndSay(int n) {
        String[] arr = {

        };
        return arr[n];
    }

    // n-1 最小 还是 n+ (n-2)最小

    public int minCostClimbingStairs_(int[] cost) {
        int[] dp = new int[cost.length + 1];
        for (int i = 2; i < dp.length; i++) {
            dp[i] = Math.min(dp[i - 2] + cost[i - 2], dp[i - 1] + cost[i - 1]);
        }

        return dp[cost.length];
    }


    public int rob(int[] nums) {
        int length = nums.length;
        if (length == 0) return 0;
        if (length == 1) return nums[0];
        int n1 = nums[0];
        int n2 = Math.max(nums[0], nums[1]);
        int max = n2;
        for (int i = 2; i < nums.length; i++) {
            max = Math.max(nums[i] + n1, n2);
            n1 = n2;
            n2 = max;
        }
        return max;
    }

    public int peakIndexInMountainArray_(int[] arr) {
        int i = 1, j = arr.length - 2;
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (arr[mid] > arr[mid - 1]) i = mid + 1;
            else j = mid - 1;
        }
        return j;
    }

    public int peakIndexInMountainArray(int[] arr) {
        int len = arr.length;
        int mid = len / 2;
        return minNum(mid, arr);
    }

    int min = 0;
    int max = 0;

    private int minNum(int mid, int[] arr) {
        if (mid == 0 || mid == arr.length) {
            return mid;
        }
        if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {// 顶峰
            return mid;
        }
        if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {// /
            min = mid;
            max = max == 0 ? arr.length : max;
            mid = (min + max) / 2;
            return minNum(mid, arr);
        }
        if (arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]) {// \
            max = mid;
            mid = (min + max) / 2;
            return minNum(mid, arr);
        }
        return mid;
    }

    public int minCostClimbingStairs(int[] cost) {
        int result = 0;
        int n = 1;
        for (int i = cost.length - 1; i >= 0; i = i - n) {
            if (i < 1) {
                return result;
            }
            int r2 = result + cost[i];
            int r1 = result + cost[i - 1];
            if (r2 < r1) {
                n = 1;
                result = r2;
            } else {
                n = 2;
                result = r1;
            }
        }
        return result;
    }


    public List<String> fizzBuzz(int n) {
        return IntStream.range(1, n + 1)
                .mapToObj(a -> a % 15 == 0 ? "FizzBuzz" : a % 3 == 0 ? "Fizz" : a % 5 == 0 ? "Buzz" : String.valueOf(a))
                .collect(Collectors.toList());
    }

    public List<String> fizzBuzz2(int n) {
        List<String> result = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            result.add((i % 15 == 0) ? "FizzBuzz"
                    : (i % 3 == 0) ? "Fizz"
                    : (i % 5 == 0) ? "Buzz"
                    : String.valueOf(i));
        }
        return result;
    }

    //2147483647
    //2
    public int divide(int dividend, int divisor) {
        if (dividend == 0) return 0;
        if (divisor == 1) return dividend;
        if (divisor == -1) {
            if (dividend > Integer.MIN_VALUE) return -dividend;// 只要不是最小的那个整数，都是直接返回相反数就好啦
            return Integer.MAX_VALUE;// 是最小的那个，那就返回最大的整数啦
        }

        long a = dividend;
        long b = divisor;

        int result = reNum(Math.abs(a), Math.abs(b));

        int sign = -1;
        if ((dividend < 0 && divisor < 0) || (dividend > 0 && divisor > 0)) {
            sign = 1;
        }

        return sign > 0 ? Math.min(result, Integer.MAX_VALUE) : -result;
    }

    int reNum(long a, long b) {
        if (a < b) return 0;
        int result = 1;
        long b1 = b;
        while (a >= (b1 + b1)) {
            b1 = b1 + b1;
            result = result + result;
        }
        return result + reNum(a - b1, b);
    }

    public List<String> findRepeatedDnaSequences(String s) {
        List<String> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i + 10 <= s.length(); i++) {
            String substring = s.substring(i, i + 10);
            int cur = map.getOrDefault(substring, 0);
            if (cur == 1) res.add(substring);
            map.put(substring, cur + 1);

        }
        return res;
    }


    //                          0        0        0        0        -1        -1      1         1-2
    //-2
    //2
    //2
    //3
    //3
    //4
    //4
    public int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int sum = (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1);
        int s = 0;
        if (bx1 >= ax2 || bx2 <= ax1 || by2 <= ay1 || by1 >= ay2) {
            s = 0;
        } else {
            int x1 = Math.max(ax1, bx1);
            int x2 = Math.min(ax2, bx2);
            int y1 = Math.max(ay1, by1);
            int y2 = Math.min(ay2, by2);
            s = (x2 - x1) * (y2 - y1);
        }
        return sum - s;
    }

/*

    int ans = 0;

    public int pathSum(TreeNode root, int targetSum) {
        // 记录路径中某个前缀和出现的次数
        Map<Integer, Integer> map = new HashMap<>();
        // 防止包含根节点的时候找不到
        map.put(0, 1);
        // 开始搜索
        dfs(root, map, 0, targetSum);
        // 返回值
        return ans;
    }

    private void dfs(TreeNode node, Map<Integer, Integer> map, int currSum, int targetSum) {
        // 递归退出条件
        if (node == null) {
            return;
        }

        // 判断是否存在符合条件的前缀和
        currSum += node.val;
        ans += map.getOrDefault(currSum - targetSum, 0);

        // 将当前前缀和记录下来
        map.put(currSum, map.getOrDefault(currSum, 0) + 1);

        // 继续往下递归
        dfs(node.left, map, currSum, targetSum);
        dfs(node.right, map, currSum, targetSum);

        // 回溯，恢复状态
        map.put(currSum, map.getOrDefault(currSum, 0) - 1);
    }
*/


    @Data
    private class item {
        public item(int id) {
            this.id = id;
        }

        int id;
    }

    private static final long MOD = 1000000007;

    public int numDecodings(String s) {
        if (s.charAt(0) == '0')
            return 0;
        long a = 1, b = 0;
        if (s.charAt(0) == '*') {
            b = 9;
        } else {
            b = 1;
        }
        for (int i = 1; i < s.length(); i++) {
            long c = 0;
            if (s.charAt(i) != '*') {
                // ? + num
                // 拆开
                if (s.charAt(i) != '0') c = b;
                // 不拆开
                //  ? 为 1 或*， * 当1
                if (s.charAt(i - 1) == '1' || s.charAt(i - 1) == '*') c += a;
                //  ? 为 2 或*， * 当2
                if (s.charAt(i) >= '0' && s.charAt(i) <= '6' && (s.charAt(i - 1) == '2' || s.charAt(i - 1) == '*'))
                    c += a;
            } else {
                // ? + *
                // 拆开
                c = b * 9;
                // 不拆开
                //   ? 为 1 或*， * 当1
                if (s.charAt(i - 1) == '1' || s.charAt(i - 1) == '*') c += a * 9;
                //   ? 为 2 或*， * 当2
                if (s.charAt(i - 1) == '2' || s.charAt(i - 1) == '*') c += a * 6;
            }
            a = b;
            b = c % MOD;
        }
        return (int) b;
    }


    /**
     * 约数
     * 题目要求不能使用循环或递归来做，而传参 nn 的数据类型为 int，这引导我们首先分析出 int 范围内的最大 33 次幂是多少，约为 3^{19} = 11622614673
     * 19
     * =1162261467。
     * <p>
     * 如果 nn 为 33 的幂的话，那么必然满足 n * 3^k = 1162261467n∗3
     * k
     * =1162261467，即 nn 与 11622614671162261467 存在倍数关系。
     * <p>
     * 因此，我们只需要判断 nn 是否为 11622614671162261467 的约数即可。
     * <p>
     * 作者：AC_OIer
     * 链接：https://leetcode-cn.com/problems/power-of-three/solution/gong-shui-san-xie-yi-ti-san-jie-shu-xue-8oiip/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     *
     * @param n
     * @return
     */
    public boolean isPowerOfThree(int n) {
        return n > 0 && 1162261467 % n == 0;
    }


}
